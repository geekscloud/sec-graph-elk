# 高级 Logstash 配置示例
# 包含数据清洗、转换、丰富和输出到多个目标

input {
  # 接收来自 Filebeat 的日志
  beats {
    port => 5044
    tags => ["security_events", "filebeat"]
  }
  
  # 接收 TCP 输入的安全事件
  tcp {
    port => 5000
    codec => json
    tags => ["security_events", "tcp"]
  }
  
  # 接收 HTTP 输入的安全事件
  http {
    port => 8080
    codec => json
    tags => ["security_events", "http"]
  }
}

filter {
  # 1. 时间戳处理
  if [@timestamp] {
    date {
      match => [ "@timestamp", "ISO8601" ]
      target => "@timestamp"
      timezone => "Asia/Shanghai"
    }
  }

  # 2. 基础字段处理
  mutate {
    # 添加处理元数据
    add_field => {
      "processed_at" => "%{@timestamp}"
      "environment" => "production"
      "data_source" => "%{tags[1]}"
    }
    
    # 移除不需要的字段
    remove_field => ["@version", "beat", "input", "prospector"]
  }

  # 3. 事件类型标准化
  if [event_type] {
    mutate {
      # 转换为大写
      uppercase => [ "event_type" ]
      # 添加标签
      add_tag => ["%{event_type}"]
    }
  }

  # 4. IP 地址处理
  if [source_ip] {
    # 地理位置信息
    geoip {
      source => "source_ip"
      target => "source_geo"
      database => "/usr/share/logstash/vendor/geoip/GeoLite2-City.mmdb"
    }
    
    # 添加 IP 类型标签
    if [source_ip] =~ /^10\./ {
      mutate {
        add_tag => ["internal_ip"]
      }
    } else {
      mutate {
        add_tag => ["external_ip"]
      }
    }
  }
  
  if [target_ip] {
    geoip {
      source => "target_ip"
      target => "target_geo"
      database => "/usr/share/logstash/vendor/geoip/GeoLite2-City.mmdb"
    }
  }

  # 5. 严重程度处理
  if [severity] {
    mutate {
      uppercase => [ "severity" ]
    }
    
    # 根据严重程度添加标签
    if [severity] == "CRITICAL" {
      mutate {
        add_tag => ["high_priority"]
      }
    }
  }

  # 6. 请求方法处理
  if [request_method] {
    mutate {
      uppercase => [ "request_method" ]
    }
  }

  # 7. 响应码处理
  if [response_code] {
    # 添加响应类型标签
    if [response_code] >= 200 and [response_code] < 300 {
      mutate {
        add_tag => ["success"]
      }
    } else if [response_code] >= 400 and [response_code] < 500 {
      mutate {
        add_tag => ["client_error"]
      }
    } else if [response_code] >= 500 {
      mutate {
        add_tag => ["server_error"]
      }
    }
  }

  # 8. 用户代理处理
  if [user_agent] {
    useragent {
      source => "user_agent"
      target => "user_agent_info"
    }
  }
}

output {
  # 1. 输出到 Elasticsearch
  elasticsearch {
    hosts => ["elasticsearch:9200"]
    user => "elastic"
    password => "elastic123456"
    # 根据事件类型和日期创建索引
    index => "security-events-%{event_type}-%{+YYYY.MM.dd}"
    # 文档 ID 使用事件类型和时间戳
    document_id => "%{event_type}-%{@timestamp}"
  }

  # 2. 输出到 Neo4j（通过 HTTP 输出）
  if [event_type] and [source_ip] and [target_ip] {
    http {
      url => "http://neo4j:7474/db/data/transaction/commit"
      http_method => "post"
      format => "json"
      mapping => {
        "statements" => [
          {
            "statement" => "MERGE (source:Server {ip: $source_ip}) MERGE (target:Server {ip: $target_ip}) CREATE (source)-[r:ATTACKED {type: $event_type, timestamp: $timestamp}]->(target)",
            "parameters" => {
              "source_ip" => "%{source_ip}",
              "target_ip" => "%{target_ip}",
              "event_type" => "%{event_type}",
              "timestamp" => "%{@timestamp}"
            }
          }
        ]
      }
      headers => {
        "Content-Type" => "application/json"
      }
    }
  }

  # 3. 调试输出（仅在开发环境使用）
  if [environment] == "development" {
    stdout {
      codec => rubydebug
    }
  }

  # 4. 错误日志输出
  if "_grokparsefailure" in [tags] {
    file {
      path => "/var/log/logstash/error.log"
      codec => json
    }
  }
} 